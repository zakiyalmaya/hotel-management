// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zakiyalmaya/hotel-management/model"
)

// BookingRepository is an autogenerated mock type for the BookingRepository type
type BookingRepository struct {
	mock.Mock
}

// Books provides a mock function with given fields: _a0
func (_m *BookingRepository) Books(_a0 *model.BookingEntity) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Books")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.BookingEntity) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByRegisterNumber provides a mock function with given fields: registerNumber
func (_m *BookingRepository) GetByRegisterNumber(registerNumber string) (*model.BookingDetail, error) {
	ret := _m.Called(registerNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetByRegisterNumber")
	}

	var r0 *model.BookingDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.BookingDetail, error)); ok {
		return rf(registerNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *model.BookingDetail); ok {
		r0 = rf(registerNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BookingDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(registerNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reschedule provides a mock function with given fields: booing
func (_m *BookingRepository) Reschedule(booing *model.BookingEntity) error {
	ret := _m.Called(booing)

	if len(ret) == 0 {
		panic("no return value specified for Reschedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.BookingEntity) error); ok {
		r0 = rf(booing)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayment provides a mock function with given fields: _a0
func (_m *BookingRepository) UpdatePayment(_a0 *model.BookingEntity) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.BookingEntity) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookingRepository creates a new instance of BookingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingRepository {
	mock := &BookingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
