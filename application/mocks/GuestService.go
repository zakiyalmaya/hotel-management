// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zakiyalmaya/hotel-management/model"
)

// GuestService is an autogenerated mock type for the GuestService type
type GuestService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *GuestService) Create(_a0 *model.GuestEntity) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.GuestEntity) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *GuestService) GetByID(id int) (*model.GuestResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.GuestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.GuestResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.GuestResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GuestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGuestService creates a new instance of GuestService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGuestService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GuestService {
	mock := &GuestService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
