// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/zakiyalmaya/hotel-management/model"
)

// RoomService is an autogenerated mock type for the RoomService type
type RoomService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *RoomService) Create(_a0 *model.RoomEntity) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RoomEntity) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: request
func (_m *RoomService) GetAll(request *model.GetAllRoomRequest) ([]*model.RoomResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.RoomResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.GetAllRoomRequest) ([]*model.RoomResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*model.GetAllRoomRequest) []*model.RoomResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RoomResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.GetAllRoomRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *RoomService) GetByName(name string) (*model.RoomResponse, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *model.RoomResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.RoomResponse, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *model.RoomResponse); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RoomResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: request
func (_m *RoomService) Update(request *model.UpdateRoomRequest) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UpdateRoomRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRoomService creates a new instance of RoomService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomService {
	mock := &RoomService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
